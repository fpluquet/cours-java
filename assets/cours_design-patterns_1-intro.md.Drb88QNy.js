import{_ as t,c as r,o as a,a2 as i}from"./chunks/framework.Df9258VE.js";const h=JSON.parse(`{"title":"Les design patterns, c'est quoi ?","description":"","frontmatter":{},"headers":[],"relativePath":"cours/design-patterns/1-intro.md","filePath":"cours/design-patterns/1-intro.md"}`),l={name:"cours/design-patterns/1-intro.md"};function o(s,e,n,u,c,p){return a(),r("div",null,e[0]||(e[0]=[i('<h1 id="les-design-patterns-c-est-quoi" tabindex="-1">Les design patterns, c&#39;est quoi ? <a class="header-anchor" href="#les-design-patterns-c-est-quoi" aria-label="Permalink to &quot;Les design patterns, c&#39;est quoi ?&quot;">​</a></h1><p>En génie logiciel, un <strong>design pattern</strong> (ou patron de conception) est une solution générale, éprouvée et réutilisable à un problème récurrent dans la conception de logiciels orientés objet.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Un design pattern n&#39;est pas un code prêt à l&#39;emploi, mais une sorte de « recette » ou de modèle de solution, applicable dans de nombreux contextes. Il décrit :</p><ul><li>le problème à résoudre,</li><li>la solution générique,</li><li>les conséquences de son utilisation.</li></ul></div><h2 id="pourquoi-utiliser-les-design-patterns" tabindex="-1">Pourquoi utiliser les design patterns ? <a class="header-anchor" href="#pourquoi-utiliser-les-design-patterns" aria-label="Permalink to &quot;Pourquoi utiliser les design patterns ?&quot;">​</a></h2><ul><li><strong>Réutilisabilité</strong> : On évite de réinventer la roue.</li><li><strong>Lisibilité</strong> : Les développeurs comprennent plus vite le rôle d&#39;une structure connue.</li><li><strong>Robustesse</strong> : Les patterns sont éprouvés et testés.</li><li><strong>Communication</strong> : Ils fournissent un vocabulaire commun entre développeurs.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>À retenir : Les design patterns facilitent la maintenance, la compréhension et l&#39;évolution des logiciels.</p></div><h2 id="origine" tabindex="-1">Origine <a class="header-anchor" href="#origine" aria-label="Permalink to &quot;Origine&quot;">​</a></h2><p>Les design patterns ont été popularisés par le livre &quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot; (1994) par Erich Gamma, Richard Helm, Ralph Johnson et John Vlissides (le &quot;Gang of Four&quot; ou GoF).</p><h2 id="structure-d-un-pattern" tabindex="-1">Structure d&#39;un pattern <a class="header-anchor" href="#structure-d-un-pattern" aria-label="Permalink to &quot;Structure d&#39;un pattern&quot;">​</a></h2><p>Un pattern est généralement décrit par :</p><ul><li><strong>Nom</strong></li><li><strong>Problème</strong></li><li><strong>Solution</strong></li><li><strong>Conséquences</strong></li><li><strong>Exemple d&#39;implémentation</strong></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Apprenez à reconnaître les patterns dans le code existant, cela vous aidera à mieux comprendre et à améliorer des projets complexes.</p></div><h2 id="liste-complete-des-design-patterns-presentes-ordre-alphabetique" tabindex="-1">Liste complète des design patterns présentés (ordre alphabétique) <a class="header-anchor" href="#liste-complete-des-design-patterns-presentes-ordre-alphabetique" aria-label="Permalink to &quot;Liste complète des design patterns présentés (ordre alphabétique)&quot;">​</a></h2><ul><li><a href="./3-creational.html#abstract-factory">Abstract Factory</a></li><li><a href="./4-structural.html#adapter">Adapter</a></li><li><a href="./4-structural.html#bridge">Bridge</a></li><li><a href="./3-creational.html#builder">Builder</a></li><li><a href="./5-behavioral.html#chain-of-responsibility">Chain of Responsibility</a></li><li><a href="./5-behavioral.html#command">Command</a></li><li><a href="./4-structural.html#composite">Composite</a></li><li><a href="./4-structural.html#decorator">Decorator</a></li><li><a href="./5-behavioral.html#double-dispatch">Double Dispatch</a></li><li><a href="./4-structural.html#facade">Facade</a></li><li><a href="./3-creational.html#factory-method">Factory Method</a></li><li><a href="./4-structural.html#flyweight">Flyweight</a></li><li><a href="./5-behavioral.html#iterator">Iterator</a></li><li><a href="./5-behavioral.html#mediator">Mediator</a></li><li><a href="./5-behavioral.html#memento">Memento</a></li><li><a href="./5-behavioral.html#observer">Observer</a></li><li><a href="./3-creational.html#prototype">Prototype</a></li><li><a href="./4-structural.html#proxy">Proxy</a></li><li><a href="./3-creational.html#singleton">Singleton</a></li><li><a href="./5-behavioral.html#state">State</a></li><li><a href="./5-behavioral.html#strategy">Strategy</a></li><li><a href="./5-behavioral.html#template-method">Template Method</a></li><li><a href="./5-behavioral.html#visitor">Visitor</a></li></ul><p>Vous pouvez cliquer sur chaque nom pour accéder directement à la section détaillée du pattern correspondant.</p>',15)]))}const m=t(l,[["render",o]]);export{h as __pageData,m as default};

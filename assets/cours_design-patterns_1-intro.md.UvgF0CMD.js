import{_ as t,c as s,o as i,a2 as n}from"./chunks/framework.Df9258VE.js";const g=JSON.parse(`{"title":"Les design patterns, c'est quoi ?","description":"","frontmatter":{},"headers":[],"relativePath":"cours/design-patterns/1-intro.md","filePath":"cours/design-patterns/1-intro.md"}`),r={name:"cours/design-patterns/1-intro.md"};function o(l,e,a,u,p,c){return i(),s("div",null,e[0]||(e[0]=[n('<h1 id="les-design-patterns-c-est-quoi" tabindex="-1">Les design patterns, c&#39;est quoi ? <a class="header-anchor" href="#les-design-patterns-c-est-quoi" aria-label="Permalink to &quot;Les design patterns, c&#39;est quoi ?&quot;">​</a></h1><p>En génie logiciel, un <strong>design pattern</strong> (ou patron de conception) est une solution générale, éprouvée et réutilisable à un problème récurrent dans la conception de logiciels orientés objet.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Un design pattern n&#39;est pas un code prêt à l&#39;emploi, mais une sorte de « recette » ou de modèle de solution, applicable dans de nombreux contextes. Il décrit :</p><ul><li>le problème à résoudre,</li><li>la solution générique,</li><li>les conséquences de son utilisation.</li></ul></div><h2 id="pourquoi-utiliser-les-design-patterns" tabindex="-1">Pourquoi utiliser les design patterns ? <a class="header-anchor" href="#pourquoi-utiliser-les-design-patterns" aria-label="Permalink to &quot;Pourquoi utiliser les design patterns ?&quot;">​</a></h2><ul><li><strong>Réutilisabilité</strong> : On évite de réinventer la roue.</li><li><strong>Lisibilité</strong> : Les développeurs comprennent plus vite le rôle d&#39;une structure connue.</li><li><strong>Robustesse</strong> : Les patterns sont éprouvés et testés.</li><li><strong>Communication</strong> : Ils fournissent un vocabulaire commun entre développeurs.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>À retenir : Les design patterns facilitent la maintenance, la compréhension et l&#39;évolution des logiciels.</p></div><h2 id="origine" tabindex="-1">Origine <a class="header-anchor" href="#origine" aria-label="Permalink to &quot;Origine&quot;">​</a></h2><p>Les design patterns ont été popularisés par le livre &quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot; (1994) par Erich Gamma, Richard Helm, Ralph Johnson et John Vlissides (le &quot;Gang of Four&quot; ou GoF).</p><h2 id="structure-d-un-pattern" tabindex="-1">Structure d&#39;un pattern <a class="header-anchor" href="#structure-d-un-pattern" aria-label="Permalink to &quot;Structure d&#39;un pattern&quot;">​</a></h2><p>Un pattern est généralement décrit par :</p><ul><li><strong>Nom</strong></li><li><strong>Problème</strong></li><li><strong>Solution</strong></li><li><strong>Conséquences</strong></li><li><strong>Exemple d&#39;implémentation</strong></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Apprenez à reconnaître les patterns dans le code existant, cela vous aidera à mieux comprendre et à améliorer des projets complexes.</p></div><h2 id="exemples-de-design-patterns-celebres" tabindex="-1">Exemples de design patterns célèbres <a class="header-anchor" href="#exemples-de-design-patterns-celebres" aria-label="Permalink to &quot;Exemples de design patterns célèbres&quot;">​</a></h2><ul><li>Singleton</li><li>Factory</li><li>Observer</li><li>Decorator</li><li>Strategy</li><li>Composite</li><li>Command</li><li>...</li></ul><p>Dans les fichiers suivants, nous allons explorer les principales familles de design patterns, leurs usages, et des exemples concrets en Java, accompagnés d&#39;explications pédagogiques.</p>',15)]))}const m=t(r,[["render",o]]);export{g as __pageData,m as default};

import{_ as k,C as r,c as d,o as a,a2 as n,b as l,w as i,a as e,G as p,a3 as h}from"./chunks/framework.Df9258VE.js";const m=JSON.parse('{"title":"Structural Design Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"cours/design-patterns/4-structural.md","filePath":"cours/design-patterns/4-structural.md"}'),E={name:"cours/design-patterns/4-structural.md"};function o(g,s,c,y,u,F){const t=r("Mermaid");return a(),d("div",null,[s[7]||(s[7]=n('<h1 id="structural-design-patterns" tabindex="-1">Structural Design Patterns <a class="header-anchor" href="#structural-design-patterns" aria-label="Permalink to &quot;Structural Design Patterns&quot;">​</a></h1><p>Les patterns structurels facilitent la composition de classes et d&#39;objets pour former des structures plus complexes. Ils permettent de rendre les architectures plus flexibles, évolutives et maintenables.</p><blockquote><p><strong>Info :</strong> Utilisez ces patterns pour organiser et optimiser la structure de vos applications, sans modifier le code existant.</p></blockquote><h2 id="adapter" tabindex="-1">Adapter <a class="header-anchor" href="#adapter" aria-label="Permalink to &quot;Adapter&quot;">​</a></h2><p>Permet de faire collaborer des classes qui n&#39;ont pas d&#39;interface compatible.</p><p><strong>Diagramme de classe :</strong></p>',6)),(a(),l(h,null,{default:i(()=>[p(t,{id:"mermaid-20",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Cible%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20Adaptee%20%7B%0A%20%20%20%20%20%20%20%20%2BoperationSpecifique()%0A%20%20%20%20%7D%0A%20%20%20%20class%20Adaptateur%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%20%20%20%20-adaptee%3A%20Adaptee%0A%20%20%20%20%7D%0A%20%20%20%20Cible%20%3C%7C..%20Adaptateur%0A%20%20%20%20Adaptateur%20--%3E%20Adaptee%0A"})]),fallback:i(()=>s[0]||(s[0]=[e(" Loading... ")])),_:1})),s[8]||(s[8]=n(`<p><strong>Explication :</strong></p><ul><li><code>Cible</code> définit l&#39;interface attendue.</li><li><code>Adaptee</code> possède une interface existante.</li><li><code>Adaptateur</code> convertit l&#39;interface de <code>Adaptee</code> en celle de <code>Cible</code>.</li></ul><p><strong>Quand l&#39;utiliser ?</strong></p><ul><li>Quand il faut intégrer une classe existante dans un nouveau système sans la modifier.</li></ul><p><strong>Exemple Java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cible</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Adaptee</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adaptee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operationSpecifique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Spécifique!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Adaptateur</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adaptateur</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Adaptee adaptee;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adaptateur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Adaptee </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { adaptee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { adaptee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operationSpecifique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>À retenir :</strong> L&#39;adaptateur agit comme un traducteur entre deux interfaces incompatibles.</p></blockquote><h2 id="bridge" tabindex="-1">Bridge <a class="header-anchor" href="#bridge" aria-label="Permalink to &quot;Bridge&quot;">​</a></h2><p>Sépare l&#39;abstraction de son implémentation pour qu&#39;elles puissent évoluer indépendamment.</p><p><strong>Diagramme de classe :</strong></p>`,10)),(a(),l(h,null,{default:i(()=>[p(t,{id:"mermaid-69",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Abstraction%20%7B%0A%20%20%20%20%20%20%20%20-impl%3A%20Impl%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20Impl%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2BoperationImpl()%0A%20%20%20%20%7D%0A%20%20%20%20class%20AbstractionConcr%C3%A8te%0A%20%20%20%20class%20ImplConcretA%0A%20%20%20%20class%20ImplConcretB%0A%20%20%20%20Abstraction%20%3C%7C..%20AbstractionConcr%C3%A8te%0A%20%20%20%20Impl%20%3C%7C..%20ImplConcretA%0A%20%20%20%20Impl%20%3C%7C..%20ImplConcretB%0A%20%20%20%20Abstraction%20--%3E%20Impl%20%3A%20d%C3%A9l%C3%A8gue%0A"})]),fallback:i(()=>s[1]||(s[1]=[e(" Loading... ")])),_:1})),s[9]||(s[9]=n(`<p><strong>Explication :</strong></p><ul><li><code>Abstraction</code> utilise une implémentation (<code>Impl</code>).</li><li>Les deux hiérarchies peuvent évoluer indépendamment.</li></ul><p><strong>Quand l&#39;utiliser ?</strong></p><ul><li>Quand il y a plusieurs variantes d&#39;une abstraction et d&#39;une implémentation.</li></ul><p><strong>Exemple Java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DessinAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dessinerCercle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DessinAPI1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DessinAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dessinerCercle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;API1 Cercle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cercle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, y, r;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DessinAPI api;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cercle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, DessinAPI </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dessiner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dessinerCercle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, r); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="composite" tabindex="-1">Composite <a class="header-anchor" href="#composite" aria-label="Permalink to &quot;Composite&quot;">​</a></h2><p>Le pattern Composite permet de traiter de manière uniforme des objets simples et des compositions d&#39;objets (arbres, hiérarchies, etc.).</p><p><strong>Diagramme de classe :</strong></p>`,9)),(a(),l(h,null,{default:i(()=>[p(t,{id:"mermaid-108",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Composant%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20Feuille%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20Composite%20%7B%0A%20%20%20%20%20%20%20%20%2Bajouter(Composant)%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%20%20%20%20-enfants%3A%20List%3CComposant%3E%0A%20%20%20%20%7D%0A%20%20%20%20Composant%20%3C%7C..%20Feuille%0A%20%20%20%20Composant%20%3C%7C..%20Composite%0A%20%20%20%20Composite%20--%3E%20Composant%20%3A%20contient%0A"})]),fallback:i(()=>s[2]||(s[2]=[e(" Loading... ")])),_:1})),s[10]||(s[10]=n(`<p><strong>Explication :</strong></p><ul><li><code>Composant</code> est l&#39;interface commune.</li><li><code>Feuille</code> est un élément simple.</li><li><code>Composite</code> peut contenir plusieurs composants (feuilles ou composites).</li></ul><p><strong>Quand l&#39;utiliser ?</strong></p><ul><li>Quand il faut manipuler de façon identique des objets simples et des groupes d&#39;objets.</li></ul><p><strong>Exemple Java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Feuille</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Feuille&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Composant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; enfants </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ajouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Composant </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { enfants.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c); }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Composant c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enfants) c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>Info :</strong> Le composite est très utilisé pour les structures arborescentes (ex : menus, systèmes de fichiers).</p></blockquote><h2 id="decorator" tabindex="-1">Decorator <a class="header-anchor" href="#decorator" aria-label="Permalink to &quot;Decorator&quot;">​</a></h2><p>Ajoute dynamiquement des responsabilités à un objet.</p><p><strong>Diagramme de classe :</strong></p>`,10)),(a(),l(h,null,{default:i(()=>[p(t,{id:"mermaid-157",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Composant%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20ComposantConcret%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20Decorateur%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%20%20%20%20-composant%3A%20Composant%0A%20%20%20%20%7D%0A%20%20%20%20Composant%20%3C%7C..%20ComposantConcret%0A%20%20%20%20Composant%20%3C%7C..%20Decorateur%0A%20%20%20%20Decorateur%20--%3E%20Composant%20%3A%20d%C3%A9core%0A"})]),fallback:i(()=>s[3]||(s[3]=[e(" Loading... ")])),_:1})),s[11]||(s[11]=n(`<p><strong>Explication :</strong></p><ul><li><code>Decorateur</code> ajoute des fonctionnalités à un composant sans modifier sa structure.</li></ul><p><strong>Quand l&#39;utiliser ?</strong></p><ul><li>Quand il faut ajouter des fonctionnalités à un objet sans modifier sa classe.</li></ul><p><strong>Exemple Java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boisson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cafe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boisson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Café&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DecorateurSucre</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boisson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boisson b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DecorateurSucre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Boisson </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, sucre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="facade" tabindex="-1">Facade <a class="header-anchor" href="#facade" aria-label="Permalink to &quot;Facade&quot;">​</a></h2><p>Fournit une interface unifiée à un ensemble d&#39;interfaces dans un sous-système.</p><p><strong>Diagramme de classe :</strong></p>`,9)),(a(),l(h,null,{default:i(()=>[p(t,{id:"mermaid-191",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Facade%20%7B%0A%20%20%20%20%20%20%20%20%2BoperationFacade()%0A%20%20%20%20%20%20%20%20-sousSysteme1%3A%20SousSysteme1%0A%20%20%20%20%20%20%20%20-sousSysteme2%3A%20SousSysteme2%0A%20%20%20%20%7D%0A%20%20%20%20class%20SousSysteme1%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation1()%0A%20%20%20%20%7D%0A%20%20%20%20class%20SousSysteme2%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation2()%0A%20%20%20%20%7D%0A%20%20%20%20Facade%20--%3E%20SousSysteme1%0A%20%20%20%20Facade%20--%3E%20SousSysteme2%0A"})]),fallback:i(()=>s[4]||(s[4]=[e(" Loading... ")])),_:1})),s[12]||(s[12]=n(`<p><strong>Explication :</strong></p><ul><li><code>Facade</code> simplifie l&#39;accès à plusieurs sous-systèmes.</li></ul><p><strong>Quand l&#39;utiliser ?</strong></p><ul><li>Quand il faut simplifier l&#39;utilisation d&#39;un système complexe.</li></ul><p><strong>Exemple Java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Facade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SousSysteme1 s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SousSysteme1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SousSysteme2 s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SousSysteme2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operationFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="flyweight" tabindex="-1">Flyweight <a class="header-anchor" href="#flyweight" aria-label="Permalink to &quot;Flyweight&quot;">​</a></h2><p>Réduit la consommation mémoire en partageant des objets similaires.</p><p><strong>Diagramme de classe :</strong></p>`,9)),(a(),l(h,null,{default:i(()=>[p(t,{id:"mermaid-225",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Flyweight%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation(etatUnique)%0A%20%20%20%20%20%20%20%20-etatPartage%0A%20%20%20%20%7D%0A%20%20%20%20class%20FlyweightFactory%20%7B%0A%20%20%20%20%20%20%20%20%2BgetFlyweight(etatPartage)%0A%20%20%20%20%20%20%20%20-pool%3A%20Map%0A%20%20%20%20%7D%0A%20%20%20%20FlyweightFactory%20--%3E%20Flyweight%20%3A%20partage%0A"})]),fallback:i(()=>s[5]||(s[5]=[e(" Loading... ")])),_:1})),s[13]||(s[13]=n(`<p><strong>Explication :</strong></p><ul><li><code>FlyweightFactory</code> gère le partage des objets <code>Flyweight</code>.</li><li><code>Flyweight</code> contient l&#39;état partagé.</li></ul><p><strong>Quand l&#39;utiliser ?</strong></p><ul><li>Quand il y a un grand nombre d&#39;objets similaires à instancier.</li></ul><p><strong>Exemple Java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flyweight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String etatPartage;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flyweight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">etat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.etatPartage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> etat; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">etatUnique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(etatPartage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> etatUnique);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h2><p>Fournit un substitut à un autre objet pour contrôler l&#39;accès à celui-ci.</p><p><strong>Diagramme de classe :</strong></p>`,9)),(a(),l(h,null,{default:i(()=>[p(t,{id:"mermaid-264",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Sujet%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20SujetReel%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%7D%0A%20%20%20%20class%20Proxy%20%7B%0A%20%20%20%20%20%20%20%20%2Boperation()%0A%20%20%20%20%20%20%20%20-sujetReel%3A%20SujetReel%0A%20%20%20%20%7D%0A%20%20%20%20Sujet%20%3C%7C..%20SujetReel%0A%20%20%20%20Sujet%20%3C%7C..%20Proxy%0A%20%20%20%20Proxy%20--%3E%20SujetReel%20%3A%20contr%C3%B4le%0A"})]),fallback:i(()=>s[6]||(s[6]=[e(" Loading... ")])),_:1})),s[14]||(s[14]=n(`<p><strong>Explication :</strong></p><ul><li><code>Proxy</code> contrôle l&#39;accès à <code>SujetReel</code> en implémentant la même interface.</li></ul><p><strong>Quand l&#39;utiliser ?</strong></p><ul><li>Pour contrôler l&#39;accès, ajouter de la sécurité, du cache, ou du logging autour d&#39;un objet.</li></ul><p><strong>Exemple Java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServiceReel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Service réel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProxyService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServiceReel service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServiceReel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy : contrôle d&#39;accès&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>À retenir :</strong> Les patterns structurels facilitent la maintenance et l&#39;évolution des architectures logicielles.</p></blockquote>`,7))])}const C=k(E,[["render",o]]);export{m as __pageData,C as default};

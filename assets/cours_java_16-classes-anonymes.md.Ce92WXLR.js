import{_ as i,c as a,o as e,a2 as n}from"./chunks/framework.DYZYzxF5.js";const c=JSON.parse('{"title":"Les classes anonymes","description":"","frontmatter":{},"headers":[],"relativePath":"cours/java/16-classes-anonymes.md","filePath":"cours/java/16-classes-anonymes.md"}'),t={name:"cours/java/16-classes-anonymes.md"};function l(p,s,h,k,r,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="les-classes-anonymes" tabindex="-1">Les classes anonymes <a class="header-anchor" href="#les-classes-anonymes" aria-label="Permalink to &quot;Les classes anonymes&quot;">​</a></h1><p>Les classes anonymes sont un outil puissant et pratique de Java, souvent utilisé pour écrire du code concis, notamment dans les interfaces graphiques, les threads ou les callbacks. Elles permettent de créer une classe « à la volée », sans avoir à lui donner un nom explicite ni à créer un fichier séparé.</p><blockquote><p><strong>À retenir :</strong> Une classe anonyme est une classe sans nom, déclarée et instanciée en une seule expression. Elle est généralement utilisée pour redéfinir rapidement le comportement d’une interface ou d’une classe abstraite.</p></blockquote><h2 id="qu-est-ce-qu-une-classe-anonyme" tabindex="-1">Qu&#39;est-ce qu&#39;une classe anonyme ? <a class="header-anchor" href="#qu-est-ce-qu-une-classe-anonyme" aria-label="Permalink to &quot;Qu&#39;est-ce qu&#39;une classe anonyme ?&quot;">​</a></h2><p>Une classe anonyme est une classe interne qui n’a pas de nom. Elle est déclarée et instanciée en même temps, généralement dans le corps d’une méthode. On l’utilise souvent pour fournir une implémentation immédiate d’une interface ou d’une classe abstraite, là où on n’a besoin de cette implémentation qu’une seule fois.</p><blockquote><p><strong>Info :</strong> Les classes anonymes sont très utilisées avant l’arrivée des lambdas (Java 8), mais restent utiles pour les cas où il faut redéfinir plusieurs méthodes ou accéder à l’état local.</p></blockquote><h2 id="definition-d-une-classe-anonyme" tabindex="-1">Définition d&#39;une classe anonyme <a class="header-anchor" href="#definition-d-une-classe-anonyme" aria-label="Permalink to &quot;Définition d&#39;une classe anonyme&quot;">​</a></h2><p>Voici un exemple classique :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Runnable r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello depuis une classe anonyme !&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Dans cet exemple, on crée une implémentation de l’interface <code>Runnable</code> sans créer de classe nommée. On instancie directement un objet qui possède la méthode <code>run()</code>.</p><blockquote><p><strong>Pédagogie :</strong></p><ul><li>On utilise souvent les classes anonymes pour passer du code en paramètre (ex : gestionnaires d’événements, threads, etc.).</li><li>Elles permettent de garder le code court et localisé, mais peuvent devenir difficiles à lire si elles sont trop longues.</li></ul></blockquote><h2 id="utilisation" tabindex="-1">Utilisation <a class="header-anchor" href="#utilisation" aria-label="Permalink to &quot;Utilisation&quot;">​</a></h2><p>Les classes anonymes sont très utiles dans les interfaces graphiques (Swing, JavaFX) pour définir le comportement d’un bouton, d’un listener, etc. Elles sont aussi utilisées pour lancer des threads rapidement :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Thread t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread lancé !&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><blockquote><p><strong>À savoir :</strong> Depuis Java 8, on peut souvent remplacer les classes anonymes par des expressions lambda, mais les classes anonymes restent nécessaires si on doit définir plusieurs méthodes ou stocker un état local.</p></blockquote><h2 id="attention-au-mot-cle-this-dans-les-classes-anonymes" tabindex="-1">Attention au mot-clé <code>this</code> dans les classes anonymes <a class="header-anchor" href="#attention-au-mot-cle-this-dans-les-classes-anonymes" aria-label="Permalink to &quot;Attention au mot-clé \`this\` dans les classes anonymes&quot;">​</a></h2><p>Lorsque vous utilisez une classe anonyme à l’intérieur d’une méthode d’un objet, il existe deux contextes différents pour le mot-clé <code>this</code> :</p><ul><li><code>this</code> dans la classe anonyme fait référence à l’instance de la classe anonyme elle-même.</li><li>Pour accéder à l’instance englobante (la classe « parente »), il faut utiliser <code>NomDeLaClasse.this</code>.</li></ul><h3 id="exemple-explicite" tabindex="-1">Exemple explicite : <a class="header-anchor" href="#exemple-explicite" aria-label="Permalink to &quot;Exemple explicite :&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Externe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String nom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Externe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Runnable r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String nom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Anonyme&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.nom); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche &quot;Anonyme&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Externe.this.nom); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche &quot;Externe&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Externe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>À retenir :</strong></p><ul><li><code>this.nom</code> fait référence à l’attribut de la classe anonyme.</li><li><code>Externe.this.nom</code> permet d’accéder à l’attribut de la classe englobante.</li></ul></blockquote><blockquote><p><strong>Info :</strong> Cette syntaxe (<code>NomDeLaClasse.this</code>) est très utile pour lever toute ambiguïté, notamment dans les callbacks ou les listeners où on veut accéder à l’objet principal.</p></blockquote><hr><p><em>Essayez de remplacer une classe anonyme par une lambda lorsque c’est possible, et observez la différence de syntaxe et de lisibilité !</em></p><p><em>Gardez en tête cette subtilité pour éviter les bugs difficiles à repérer dans les programmes utilisant des classes anonymes imbriquées !</em></p>`,25)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};

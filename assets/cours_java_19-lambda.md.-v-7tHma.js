import{_ as a,c as e,o as i,a2 as n}from"./chunks/framework.DYZYzxF5.js";const c=JSON.parse('{"title":"Interfaces fonctionnelles et expressions lambda","description":"","frontmatter":{},"headers":[],"relativePath":"cours/java/19-lambda.md","filePath":"cours/java/19-lambda.md"}'),t={name:"cours/java/19-lambda.md"};function l(p,s,r,o,h,d){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="interfaces-fonctionnelles-et-expressions-lambda" tabindex="-1">Interfaces fonctionnelles et expressions lambda <a class="header-anchor" href="#interfaces-fonctionnelles-et-expressions-lambda" aria-label="Permalink to &quot;Interfaces fonctionnelles et expressions lambda&quot;">​</a></h1><p>Les interfaces fonctionnelles et les expressions lambda sont deux concepts clés introduits en Java 8 pour rendre le code plus concis, lisible et orienté « programmation fonctionnelle ».</p><blockquote><p><strong>À retenir :</strong> Les lambdas permettent de passer du comportement (du code) en paramètre, rendant le code plus flexible et expressif.</p></blockquote><h2 id="qu-est-ce-qu-une-interface-fonctionnelle" tabindex="-1">Qu&#39;est-ce qu&#39;une interface fonctionnelle ? <a class="header-anchor" href="#qu-est-ce-qu-une-interface-fonctionnelle" aria-label="Permalink to &quot;Qu&#39;est-ce qu&#39;une interface fonctionnelle ?&quot;">​</a></h2><p>Une interface fonctionnelle est une interface qui ne contient <strong>qu&#39;une seule méthode abstraite</strong> (mais peut contenir des méthodes par défaut ou statiques). C’est ce type d’interface qui peut être utilisé avec les expressions lambda.</p><blockquote><p><strong>Exemples d’interfaces fonctionnelles dans Java :</strong></p><ul><li><code>Runnable</code> (méthode <code>void run()</code>)</li><li><code>Comparator&lt;T&gt;</code> (méthode <code>int compare(T o1, T o2)</code>)</li><li><code>java.util.function.Function&lt;T, R&gt;</code></li></ul></blockquote><h2 id="les-expressions-lambda" tabindex="-1">Les expressions Lambda <a class="header-anchor" href="#les-expressions-lambda" aria-label="Permalink to &quot;Les expressions Lambda&quot;">​</a></h2><h3 id="introduction-aux-lambdas" tabindex="-1">Introduction aux Lambdas <a class="header-anchor" href="#introduction-aux-lambdas" aria-label="Permalink to &quot;Introduction aux Lambdas&quot;">​</a></h3><p>Les lambdas permettent d&#39;écrire des fonctions anonymes plus concises, c’est-à-dire du code que l’on peut passer comme paramètre à une méthode, sans créer de classe anonyme.</p><blockquote><p><strong>Info :</strong> Avant Java 8, il fallait utiliser des classes anonymes pour passer du code en paramètre. Les lambdas simplifient et raccourcissent énormément cette syntaxe.</p></blockquote><h3 id="syntaxe-generale-d-une-expression-lambda" tabindex="-1">Syntaxe générale d&#39;une expression lambda <a class="header-anchor" href="#syntaxe-generale-d-une-expression-lambda" aria-label="Permalink to &quot;Syntaxe générale d&#39;une expression lambda&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(paramètres) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression</span></span></code></pre></div><ul><li>Si le corps contient plusieurs instructions, on utilise des accolades :</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(paramètres) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // instructions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> valeur;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="exemples-de-lambdas-simples" tabindex="-1">Exemples de lambdas simples <a class="header-anchor" href="#exemples-de-lambdas-simples" aria-label="Permalink to &quot;Exemples de lambdas simples&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Runnable r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Comparator&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; comp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Function&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; longueur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><blockquote><p><strong>Pédagogie :</strong></p><ul><li>Si la lambda ne prend qu&#39;un paramètre, les parenthèses sont optionnelles.</li><li>Si le corps ne contient qu&#39;une instruction, les accolades et le <code>return</code> sont optionnels.</li></ul></blockquote><h3 id="quand-utiliser-les-lambdas" tabindex="-1">Quand utiliser les lambdas ? <a class="header-anchor" href="#quand-utiliser-les-lambdas" aria-label="Permalink to &quot;Quand utiliser les lambdas ?&quot;">​</a></h3><p>Les lambdas sont utiles pour passer du code en paramètre, notamment dans les API fonctionnelles (ex : tri, filtres, transformations, gestionnaires d’événements, etc.).</p><p><strong>Exemple : tri d’une liste</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; noms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">noms.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareToIgnoreCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b));</span></span></code></pre></div><h3 id="limites-des-lambdas" tabindex="-1">Limites des Lambdas <a class="header-anchor" href="#limites-des-lambdas" aria-label="Permalink to &quot;Limites des Lambdas&quot;">​</a></h3><ul><li>Les lambdas ne peuvent accéder qu’à des variables locales qui sont finales ou effectivement finales (c’est-à-dire non modifiées après leur affectation).</li><li>Elles ne peuvent pas redéfinir plusieurs méthodes (une seule méthode abstraite dans l’interface fonctionnelle).</li></ul><blockquote><p><strong>À savoir :</strong> Les lambdas ne créent pas de nouvelle portée pour les variables locales, contrairement aux classes anonymes.</p></blockquote><h2 id="le-tag-functionalinterface" tabindex="-1">Le tag <code>@FunctionalInterface</code> <a class="header-anchor" href="#le-tag-functionalinterface" aria-label="Permalink to &quot;Le tag \`@FunctionalInterface\`&quot;">​</a></h2><p>Le tag <code>@FunctionalInterface</code> permet d’indiquer explicitement qu’une interface est fonctionnelle. Cela force le compilateur à vérifier qu’il n’y a qu’une seule méthode abstraite.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Calculateur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>Info :</strong> Ce tag est optionnel mais recommandé pour la clarté et la sécurité du code.</p></blockquote><hr><p><em>Essayez de remplacer une classe anonyme par une lambda, et observez la différence de syntaxe et de lisibilité !</em></p>`,30)]))}const u=a(t,[["render",l]]);export{c as __pageData,u as default};

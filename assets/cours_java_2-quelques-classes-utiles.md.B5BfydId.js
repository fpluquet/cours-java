import{_ as a,c as e,o as i,a2 as t}from"./chunks/framework.Df9258VE.js";const u=JSON.parse('{"title":"Quelques classes utiles","description":"","frontmatter":{},"headers":[],"relativePath":"cours/java/2-quelques-classes-utiles.md","filePath":"cours/java/2-quelques-classes-utiles.md"}'),l={name:"cours/java/2-quelques-classes-utiles.md"};function n(p,s,r,c,h,o){return i(),e("div",null,s[0]||(s[0]=[t(`<h1 id="quelques-classes-utiles" tabindex="-1">Quelques classes utiles <a class="header-anchor" href="#quelques-classes-utiles" aria-label="Permalink to &quot;Quelques classes utiles&quot;">​</a></h1><p>Dans l’univers Java, certaines classes sont de véritables piliers. Elles accompagnent chaque programmeur, du tout premier « Hello World » aux applications les plus ambitieuses. Découvrons ensemble ces compagnons incontournables.</p><h2 id="la-classe-contenant-une-methode-public-static-void-main" tabindex="-1">La classe contenant une méthode <code>public static void main</code> <a class="header-anchor" href="#la-classe-contenant-une-methode-public-static-void-main" aria-label="Permalink to &quot;La classe contenant une méthode \`public static void main\`&quot;">​</a></h2><p>Tout commence ici. La porte d’entrée de chaque programme Java, c’est cette fameuse classe qui abrite la méthode <code>public static void main</code>. C’est elle qui donne le top départ à l’exécution de votre code, le point de rendez-vous de toutes vos idées logicielles.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Exemple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // c&#39;est ici que vous écrivez votre programme principal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="la-classe-system" tabindex="-1">La classe System <a class="header-anchor" href="#la-classe-system" aria-label="Permalink to &quot;La classe System&quot;">​</a></h2><p>Impossible de faire ses premiers pas en Java sans croiser la route de la classe <code>System</code>. Véritable boîte à outils, elle met à disposition des flux d’entrée et de sortie, essentiels pour dialoguer avec l’utilisateur ou afficher des résultats.</p><ul><li>L’attribut statique <code>out</code> vous permet d’écrire à l’écran : <ul><li>La méthode <code>println</code> pour afficher une ligne et passer à la suivante :<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mon texte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Surcharges pour tous les types existantes</span></span></code></pre></div></li><li>La méthode <code>print</code> pour afficher sans retour à la ligne :<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maVariable);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Il existe des surcharges pour tous les types</span></span></code></pre></div></li></ul></li><li>Il existe aussi un attribut statique <code>in</code> pour les entrées clavier. Mais, pour plus de confort, on lui préfère souvent la classe <code>Scanner</code>.</li></ul><h2 id="la-classe-scanner" tabindex="-1">La classe Scanner <a class="header-anchor" href="#la-classe-scanner" aria-label="Permalink to &quot;La classe Scanner&quot;">​</a></h2><p>Lire ce que l’utilisateur saisit, c’est le rôle de la classe <code>Scanner</code> (du package <code>java.util</code>). Elle rend la lecture de texte ou de nombres aussi simple qu’intuitive.</p><ul><li>Son constructeur prend en argument un flux d’entrée (ici, la console) :<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scanner scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.in);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//scanner.nextInt();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li></ul><p>Grâce à ces classes, vous disposez déjà d’un arsenal pour interagir avec le monde extérieur. Prêt à écrire vos premiers programmes dynamiques ?</p>`,12)]))}const k=a(l,[["render",n]]);export{u as __pageData,k as default};

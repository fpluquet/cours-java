import{_ as i,c as a,o as e,a2 as n}from"./chunks/framework.DYZYzxF5.js";const c=JSON.parse('{"title":"La méthode main","description":"","frontmatter":{},"headers":[],"relativePath":"cours/java/3-methode-main.md","filePath":"cours/java/3-methode-main.md"}'),t={name:"cours/java/3-methode-main.md"};function l(p,s,h,r,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="la-methode-main" tabindex="-1">La méthode <code>main</code> <a class="header-anchor" href="#la-methode-main" aria-label="Permalink to &quot;La méthode \`main\`&quot;">​</a></h1><p>Au cœur de chaque programme Java, il y a un point de départ, un rituel immuable : la méthode <code>main</code>. C’est elle qui donne vie à votre application, qui orchestre le tout premier souffle de votre code.</p><p>Comme nous l’avons déjà évoqué, Java est un langage farouchement orienté objet. Rien n’existe en dehors d’une classe, et la méthode <code>main</code> ne fait pas exception à la règle. Elle est le portail d’entrée, le chef d’orchestre qui lance l’exécution.</p><p>Sa signature est sacrée :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args)</span></span></code></pre></div><ul><li><code>public</code> : pour être accessible par la machine virtuelle Java.</li><li><code>static</code> : car elle doit pouvoir être appelée sans qu’aucun objet ne soit encore créé.</li><li><code>void</code> : elle ne renvoie rien, elle agit.</li><li><code>String[] args</code> : un tableau de chaînes de caractères, pour recevoir d’éventuels arguments passés lors du lancement du programme.</li></ul><p>À noter : contrairement à d’autres langages comme C#, le nom du fichier exécuté ne fait pas partie de ces arguments. Seuls les paramètres explicitement fournis à l’exécution y figurent.</p><h2 id="exemple-exploiter-les-arguments-de-la-ligne-de-commande" tabindex="-1">Exemple : exploiter les arguments de la ligne de commande <a class="header-anchor" href="#exemple-exploiter-les-arguments-de-la-ligne-de-commande" aria-label="Permalink to &quot;Exemple : exploiter les arguments de la ligne de commande&quot;">​</a></h2><p>La méthode <code>main</code> peut recevoir des paramètres lors du lancement du programme. Ceux-ci sont accessibles via le tableau <code>args</code>. Voici un exemple simple qui affiche chaque argument reçu :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArgumentsDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nombre d&#39;arguments : &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.length);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Argument &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; : &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Si vous lancez ce programme avec la commande :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java ArgumentsDemo bonjour 42 test</span></span></code></pre></div><p>Vous obtiendrez :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Nombre d&#39;arguments : 3</span></span>
<span class="line"><span>Argument 0 : bonjour</span></span>
<span class="line"><span>Argument 1 : 42</span></span>
<span class="line"><span>Argument 2 : test</span></span></code></pre></div><p>Ainsi, la méthode <code>main</code> est la porte d’entrée universelle de vos aventures Java. C’est ici que tout commence !</p>`,15)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};

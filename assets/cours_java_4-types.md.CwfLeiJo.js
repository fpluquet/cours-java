import{_ as s,c as t,o as a,a2 as o}from"./chunks/framework.Df9258VE.js";const r="/cours-java/images/types_byte.png",i="/cours-java/images/types_short.png",l="/cours-java/images/types_int.png",n="/cours-java/images/types_long.png",p="/cours-java/images/types_float.png",c="/cours-java/images/types_double.png",u="/cours-java/images/types_char.png",d="/cours-java/images/types_boolean.png",j=JSON.parse('{"title":"Les types en Java","description":"","frontmatter":{},"headers":[],"relativePath":"cours/java/4-types.md","filePath":"cours/java/4-types.md"}'),g={name:"cours/java/4-types.md"};function m(_,e,v,y,b,h){return a(),t("div",null,e[0]||(e[0]=[o('<h1 id="les-types-en-java" tabindex="-1">Les types en Java <a class="header-anchor" href="#les-types-en-java" aria-label="Permalink to &quot;Les types en Java&quot;">​</a></h1><p>Dans le royaume de Java, tout est question de types. Le langage veille jalousement à ce que chaque variable, chaque valeur, ait une identité claire et précise. C’est ce qu’on appelle un langage à typage statique : ici, rien n’est laissé au hasard.</p><p>Java distingue deux grandes familles :</p><ul><li>Les <strong>types primitifs</strong> : ce sont les briques de base, simples, efficaces, non objets.</li><li>Les <strong>types objets</strong> : pour chaque type primitif, il existe une classe associée, permettant d’en faire un objet, de le manipuler, de lui appliquer des méthodes (comme <code>parseInt</code>, <code>toString</code>, etc.).</li></ul><h2 id="les-types-de-base" tabindex="-1">Les types de base <a class="header-anchor" href="#les-types-de-base" aria-label="Permalink to &quot;Les types de base&quot;">​</a></h2><p>Voici la galerie des types primitifs disponibles en Java :</p><ul><li><strong>Classe <code>Byte</code></strong> : pour les petits nombres entiers. <img src="'+r+'" alt="byte"></li><li><strong>Classe <code>Short</code></strong> : un peu plus grand, mais toujours modeste. <img src="'+i+'" alt="short"></li><li><strong>Classe <code>Integer</code></strong> : le standard pour les entiers. <img src="'+l+'" alt="int"></li><li><strong>Classe <code>Long</code></strong> : pour les très grands entiers. <img src="'+n+'" alt="long"></li><li><strong>Classe <code>Float</code></strong> : pour les nombres à virgule flottante, en version légère. <img src="'+p+'" alt="float"></li><li><strong>Classe <code>Double</code></strong> : la version « haute précision » des nombres à virgule. <img src="'+c+'" alt="double"></li><li><strong>Classe <code>Character</code></strong> : pour manipuler les caractères, une lettre à la fois. <img src="'+u+'" alt="char"></li><li><strong>Classe <code>Boolean</code></strong> : le royaume du vrai et du faux. <img src="'+d+'" alt="boolean"></li></ul><p>Grâce à cette palette, Java vous permet de représenter toutes les données fondamentales, du plus petit bit au plus grand nombre, du simple caractère à la vérité logique. À vous de choisir le type qui correspond à votre besoin, et de jongler avec ces outils pour bâtir des programmes robustes et précis.</p>',8)]))}const q=s(g,[["render",m]]);export{j as __pageData,q as default};

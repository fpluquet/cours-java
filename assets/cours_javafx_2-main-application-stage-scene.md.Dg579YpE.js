import{_ as a,c as s,o as i,a2 as t}from"./chunks/framework.Df9258VE.js";const g=JSON.parse('{"title":"La classe Main, la classe Application, les stages et les Scenes","description":"","frontmatter":{},"headers":[],"relativePath":"cours/javafx/2-main-application-stage-scene.md","filePath":"cours/javafx/2-main-application-stage-scene.md"}'),n={name:"cours/javafx/2-main-application-stage-scene.md"};function l(o,e,p,r,c,d){return i(),s("div",null,e[0]||(e[0]=[t('<h1 id="la-classe-main-la-classe-application-les-stages-et-les-scenes" tabindex="-1">La classe Main, la classe Application, les stages et les Scenes <a class="header-anchor" href="#la-classe-main-la-classe-application-les-stages-et-les-scenes" aria-label="Permalink to &quot;La classe Main, la classe Application, les stages et les Scenes&quot;">​</a></h1><p>Dans JavaFX, la structure d&#39;une application graphique repose sur quelques concepts clés. Bien comprendre ces notions est essentiel pour organiser et développer des interfaces robustes et évolutives.</p><ul><li><strong>Application</strong> : la classe de base de toute application JavaFX. Elle gère le cycle de vie de l&#39;application (initialisation, démarrage, arrêt).</li><li><strong>Stage</strong> : représente une fenêtre de l&#39;application. On peut en avoir plusieurs (ex : fenêtre principale, boîtes de dialogue).</li><li><strong>Scene</strong> : représente le contenu affiché dans une fenêtre (<code>Stage</code>). On peut changer la scène d&#39;un stage à tout moment.</li><li><strong>Node</strong> : tout élément graphique (bouton, texte, forme, conteneur, etc.) est un <code>Node</code>. Les nodes forment un arbre hiérarchique.</li></ul><blockquote><p><strong>Info :</strong> Pense à la hiérarchie suivante : <strong>Application</strong> &gt; <strong>Stage</strong> (fenêtre) &gt; <strong>Scene</strong> (contenu) &gt; <strong>Node</strong> (éléments graphiques). C&#39;est la base de toute interface JavaFX.</p></blockquote><h2 id="difference-entre-application-stage-scene-et-node" tabindex="-1">Différence entre <code>Application</code>, <code>Stage</code>, <code>Scene</code> et <code>Node</code> <a class="header-anchor" href="#difference-entre-application-stage-scene-et-node" aria-label="Permalink to &quot;Différence entre `Application`, `Stage`, `Scene` et `Node`&quot;">​</a></h2><ul><li>L&#39;application (<code>Application</code>) contient toutes les fenêtres.</li><li>Le stage (<code>Stage</code>) est une fenêtre.</li><li>La scène (<code>Scene</code>) est le contenu d&#39;une fenêtre.</li><li>Les éléments graphiques (boutons, labels, etc.) sont des <code>Node</code>.</li></ul><p><img src="https://amyfowlersblog.files.wordpress.com/2011/06/javafx2-0layoutclasses.png" alt="Hiérarchie des noeuds JavaFX"></p><blockquote><p><strong>À retenir :</strong> Le layout manager (gestionnaire de disposition) utilisé dans la scène influence la manière dont les éléments sont redimensionnés. Par exemple, un <code>VBox</code> ou un <code>GridPane</code> ne gèrent pas la taille de leurs enfants de la même façon.</p></blockquote><h2 id="la-methode-launch" tabindex="-1">La méthode <code>launch</code> <a class="header-anchor" href="#la-methode-launch" aria-label="Permalink to &quot;La méthode `launch`&quot;">​</a></h2><p>La méthode statique <code>launch()</code> de la classe <code>Application</code> démarre l&#39;application JavaFX et crée le thread graphique. Elle appelle automatiquement la méthode <code>start()</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Démarre l&#39;application JavaFX</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Explication :</strong></p><ul><li><code>launch(args)</code> initialise l&#39;environnement JavaFX et appelle la méthode <code>start()</code>.</li><li>La classe doit hériter de <code>Application</code> pour fonctionner.</li></ul><h2 id="la-methode-start" tabindex="-1">La méthode <code>start</code> <a class="header-anchor" href="#la-methode-start" aria-label="Permalink to &quot;La méthode `start`&quot;">​</a></h2><p>La méthode <code>start(Stage primaryStage)</code> doit être redéfinie. C&#39;est ici que tu configures la fenêtre principale et son contenu (titre, taille, scène, etc.).</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Stage primaryStage) throws Exception {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    primaryStage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Définit le titre de la fenêtre</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    primaryStage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche la fenêtre</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Explication :</strong></p><ul><li><code>primaryStage</code> est la fenêtre principale de l&#39;application.</li><li>On peut y attacher une scène (<code>primaryStage.setScene(...)</code>), définir son titre, sa taille, etc.</li><li>On peut créer d&#39;autres stages pour afficher des fenêtres secondaires.</li></ul><blockquote><p><strong>Info :</strong> Le paramètre <code>primaryStage</code> est la fenêtre principale de l&#39;application. Tu peux en créer d&#39;autres si besoin (pour des boîtes de dialogue, des popups, etc.).</p></blockquote><blockquote><p><strong>À retenir :</strong> La méthode <code>start</code> est le point d&#39;entrée graphique de toute application JavaFX. C&#39;est ici que commence la vie de l&#39;interface !</p></blockquote>',20)]))}const k=a(n,[["render",l]]);export{g as __pageData,k as default};

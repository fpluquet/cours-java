import{_ as e,c as t,o as i,a2 as s}from"./chunks/framework.DYZYzxF5.js";const c=JSON.parse('{"title":"JavaFX et le multi-threading","description":"","frontmatter":{},"headers":[],"relativePath":"cours/javafx/5-multithreading.md","filePath":"cours/javafx/5-multithreading.md"}'),n={name:"cours/javafx/5-multithreading.md"};function l(r,a,o,d,p,h){return i(),t("div",null,a[0]||(a[0]=[s(`<h1 id="javafx-et-le-multi-threading" tabindex="-1">JavaFX et le multi-threading <a class="header-anchor" href="#javafx-et-le-multi-threading" aria-label="Permalink to &quot;JavaFX et le multi-threading&quot;">​</a></h1><p>Dans une application JavaFX, toutes les modifications de l&#39;interface graphique doivent être effectuées dans le thread JavaFX (le thread principal de l&#39;UI). Si tu veux mettre à jour l&#39;interface depuis un autre thread (par exemple, après un calcul long ou une opération réseau), il faut utiliser <code>Platform.runLater()</code>.</p><blockquote><p><strong>Info :</strong> Si tu modifies l&#39;UI depuis un autre thread sans passer par <code>Platform.runLater</code>, tu risques des bugs difficiles à diagnostiquer !</p></blockquote><h2 id="exemple" tabindex="-1">Exemple <a class="header-anchor" href="#exemple" aria-label="Permalink to &quot;Exemple&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Platform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Code de mise à jour de l&#39;interface, exécuté dans le thread JavaFX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    button.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><blockquote><p><strong>À retenir :</strong> Toujours utiliser <code>Platform.runLater</code> pour toute modification de l&#39;UI depuis un thread secondaire.</p></blockquote>`,6)]))}const k=e(n,[["render",l]]);export{c as __pageData,k as default};

import{_ as i,c as s,o as a,a2 as l}from"./chunks/framework.DYZYzxF5.js";const d=JSON.parse('{"title":"Découper une interface JavaFX en plusieurs FXML et contrôleurs spécialisés","description":"","frontmatter":{},"headers":[],"relativePath":"cours/javafx/7-fxml-complex.md","filePath":"cours/javafx/7-fxml-complex.md"}'),n={name:"cours/javafx/7-fxml-complex.md"};function t(r,e,p,o,h,c){return a(),s("div",null,e[0]||(e[0]=[l(`<h1 id="decouper-une-interface-javafx-en-plusieurs-fxml-et-controleurs-specialises" tabindex="-1">Découper une interface JavaFX en plusieurs FXML et contrôleurs spécialisés <a class="header-anchor" href="#decouper-une-interface-javafx-en-plusieurs-fxml-et-controleurs-specialises" aria-label="Permalink to &quot;Découper une interface JavaFX en plusieurs FXML et contrôleurs spécialisés&quot;">​</a></h1><p>Pour les applications JavaFX complexes, il est recommandé de structurer l’interface en plusieurs fichiers FXML, chacun associé à un contrôleur dédié. Cela permet de mieux organiser le code, de réutiliser des composants, et de faciliter la maintenance.</p><h2 id="pourquoi-decouper-en-plusieurs-fxml" tabindex="-1">Pourquoi découper en plusieurs FXML ? <a class="header-anchor" href="#pourquoi-decouper-en-plusieurs-fxml" aria-label="Permalink to &quot;Pourquoi découper en plusieurs FXML ?&quot;">​</a></h2><ul><li><strong>Lisibilité</strong> : chaque partie de l’interface a son propre fichier, plus facile à lire et à modifier.</li><li><strong>Réutilisabilité</strong> : on peut réutiliser un même composant (ex : une barre de navigation) dans plusieurs vues.</li><li><strong>Modularité</strong> : chaque contrôleur gère une seule responsabilité, ce qui simplifie le code.</li><li><strong>Travail en équipe</strong> : plusieurs personnes peuvent travailler sur différentes parties de l’UI sans conflit.</li></ul><h2 id="exemple-de-decoupage" tabindex="-1">Exemple de découpage <a class="header-anchor" href="#exemple-de-decoupage" aria-label="Permalink to &quot;Exemple de découpage&quot;">​</a></h2><p>Imaginons une application avec :</p><ul><li>Un menu principal</li><li>Une barre latérale</li><li>Un contenu central</li></ul><p>On crée :</p><ul><li><code>MainView.fxml</code> (structure globale, type BorderPane)</li><li><code>MenuBar.fxml</code> (menu du haut)</li><li><code>Sidebar.fxml</code> (barre latérale)</li><li><code>Content.fxml</code> (zone centrale)</li></ul><h2 id="etapes-detaillees" tabindex="-1">Étapes détaillées <a class="header-anchor" href="#etapes-detaillees" aria-label="Permalink to &quot;Étapes détaillées&quot;">​</a></h2><h3 id="_1-creer-les-fichiers-fxml" tabindex="-1">1. Créer les fichiers FXML <a class="header-anchor" href="#_1-creer-les-fichiers-fxml" aria-label="Permalink to &quot;1. Créer les fichiers FXML&quot;">​</a></h3><ul><li><code>MainView.fxml</code> :</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">BorderPane</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fx:controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.MainController&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fx:include</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MenuBar.fxml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fx:include</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sidebar.fxml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fx:include</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content.fxml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">BorderPane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><code>MenuBar.fxml</code>, <code>Sidebar.fxml</code>, <code>Content.fxml</code> : chaque fichier décrit sa partie de l’UI et peut avoir son propre contrôleur.</li></ul><h3 id="_2-associer-un-controleur-a-chaque-fxml" tabindex="-1">2. Associer un contrôleur à chaque FXML <a class="header-anchor" href="#_2-associer-un-controleur-a-chaque-fxml" aria-label="Permalink to &quot;2. Associer un contrôleur à chaque FXML&quot;">​</a></h3><ul><li><code>MenuBar.fxml</code> → <code>MenuBarController.java</code></li><li><code>Sidebar.fxml</code> → <code>SidebarController.java</code></li><li><code>Content.fxml</code> → <code>ContentController.java</code></li></ul><p>Dans chaque FXML, ajouter l’attribut <code>fx:controller</code> correspondant.</p><h3 id="_3-utiliser-fx-include-pour-l-assemblage" tabindex="-1">3. Utiliser <code>&lt;fx:include&gt;</code> pour l’assemblage <a class="header-anchor" href="#_3-utiliser-fx-include-pour-l-assemblage" aria-label="Permalink to &quot;3. Utiliser \`&lt;fx:include&gt;\` pour l’assemblage&quot;">​</a></h3><p>L’élément <code>&lt;fx:include&gt;</code> permet d’inclure un autre fichier FXML dans un FXML principal. Les contrôleurs de chaque sous-vue sont instanciés automatiquement.</p><h3 id="_4-communication-entre-controleurs" tabindex="-1">4. Communication entre contrôleurs <a class="header-anchor" href="#_4-communication-entre-controleurs" aria-label="Permalink to &quot;4. Communication entre contrôleurs&quot;">​</a></h3><p>Pour faire communiquer les contrôleurs (ex : le menu déclenche une action dans le contenu), plusieurs solutions :</p><ul><li>Passer une référence du contrôleur parent aux enfants via des méthodes publiques ou l’injection.</li><li>Utiliser un modèle partagé (pattern Observer, propriétés JavaFX, etc.).</li><li>Utiliser des événements personnalisés.</li></ul><p><strong>Exemple :</strong> Dans le contrôleur principal :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FXML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SidebarController sidebarController;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FXML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentController contentController;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FXML</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sidebarController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contentController);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>Info :</strong> Pour que l’injection de sous-contrôleurs fonctionne, il faut donner un <code>fx:id</code> à la balise <code>&lt;fx:include&gt;</code> dans le FXML parent.</p></blockquote><h3 id="_5-tester-et-maintenir" tabindex="-1">5. Tester et maintenir <a class="header-anchor" href="#_5-tester-et-maintenir" aria-label="Permalink to &quot;5. Tester et maintenir&quot;">​</a></h3><ul><li>Chaque composant peut être testé séparément.</li><li>Les modifications dans un sous-FXML n’impactent pas les autres parties de l’UI.</li></ul><h2 id="a-retenir" tabindex="-1">À retenir <a class="header-anchor" href="#a-retenir" aria-label="Permalink to &quot;À retenir&quot;">​</a></h2><p>Découper une interface en plusieurs FXML et contrôleurs spécialisés permet de gagner en clarté, en modularité et en maintenabilité. C’est une bonne pratique pour tout projet JavaFX de taille moyenne à grande.</p>`,29)]))}const k=i(n,[["render",t]]);export{d as __pageData,k as default};

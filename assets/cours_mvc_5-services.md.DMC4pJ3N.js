import{_ as t,C as l,c as r,o as e,a2 as p,b as h,j as i,w as a,a as k,G as o,a3 as c}from"./chunks/framework.Df9258VE.js";const C=JSON.parse(`{"title":"Les services dans l'architecture MVC","description":"","frontmatter":{},"headers":[],"relativePath":"cours/mvc/5-services.md","filePath":"cours/mvc/5-services.md"}`),d={name:"cours/mvc/5-services.md"};function E(u,s,g,y,m,v){const n=l("Mermaid");return e(),r("div",null,[s[1]||(s[1]=p(`<h1 id="les-services-dans-l-architecture-mvc" tabindex="-1">Les services dans l&#39;architecture MVC <a class="header-anchor" href="#les-services-dans-l-architecture-mvc" aria-label="Permalink to &quot;Les services dans l&#39;architecture MVC&quot;">​</a></h1><p>Dans une application moderne, le modèle MVC peut être enrichi par l&#39;ajout d&#39;une couche de <strong>services</strong>. Cette couche permet de séparer la logique métier complexe ou réutilisable du modèle lui-même, et d&#39;améliorer la clarté et la maintenabilité du code.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Un service, c&#39;est un « cerveau » qui applique les règles métier, alors que le modèle ne fait que stocker les données.</p></div><h2 id="qu-est-ce-qu-un-service" tabindex="-1">Qu&#39;est-ce qu&#39;un service ? <a class="header-anchor" href="#qu-est-ce-qu-un-service" aria-label="Permalink to &quot;Qu&#39;est-ce qu&#39;un service ?&quot;">​</a></h2><p>Un service est une classe qui contient des méthodes métier (ex : calculs, règles de gestion, traitements sur les données) qui ne relèvent pas directement d&#39;un seul modèle.</p><ul><li>Il peut utiliser plusieurs modèles à la fois.</li><li>Il centralise la logique métier pour éviter la duplication de code.</li><li>Il facilite l&#39;évolution des règles métier sans toucher à la structure des données.</li></ul><h2 id="pourquoi-utiliser-des-services" tabindex="-1">Pourquoi utiliser des services ? <a class="header-anchor" href="#pourquoi-utiliser-des-services" aria-label="Permalink to &quot;Pourquoi utiliser des services ?&quot;">​</a></h2><ul><li><strong>Centraliser</strong> la logique métier complexe ou partagée</li><li><strong>Faciliter</strong> la réutilisation du code</li><li><strong>Alléger</strong> les modèles et les contrôleurs</li><li><strong>Favoriser</strong> les tests unitaires (on peut tester un service indépendamment du reste)</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Un service ne gère ni l&#39;affichage, ni la persistance : il ne fait que de la logique métier.</p></div><h2 id="exemple-simple" tabindex="-1">Exemple simple <a class="header-anchor" href="#exemple-simple" aria-label="Permalink to &quot;Exemple simple&quot;">​</a></h2><p>Voici un exemple de service pour le modèle <code>Personne</code> :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonneService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> estMajeur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Personne </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">personne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personne.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Autres méthodes métier...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>On peut ensuite utiliser ce service dans un contrôleur ou un autre service :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonneController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PersonneService service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonneService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> afficherStatut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Personne </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">personne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">estMajeur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personne)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personne.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrenom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; est majeur(e)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personne.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrenom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; est mineur(e)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="exemple-avance-service-qui-utilise-un-repository" tabindex="-1">Exemple avancé : service qui utilise un repository <a class="header-anchor" href="#exemple-avance-service-qui-utilise-un-repository" aria-label="Permalink to &quot;Exemple avancé : service qui utilise un repository&quot;">​</a></h2><p>Un service peut aussi utiliser un repository pour appliquer une logique métier sur des données persistantes.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonneService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PersonneRepository repository;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonneService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PersonneRepository </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.repository </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Retourne toutes les personnes majeures</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Personne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPersonnesMajores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">estMajeur)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> estMajeur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Personne </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">personne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personne.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Injecter le repository dans le service permet de tester le service avec une base réelle ou simulée (en mémoire).</p></div><hr><h2 id="cas-d-utilisation-specifiques" tabindex="-1">Cas d’utilisation spécifiques <a class="header-anchor" href="#cas-d-utilisation-specifiques" aria-label="Permalink to &quot;Cas d’utilisation spécifiques&quot;">​</a></h2><ul><li><strong>Calculs complexes</strong> : Un service peut calculer le salaire net à partir de plusieurs modèles (employé, fiche de paie, taux d’imposition, etc.).</li><li><strong>Vérification de règles métier</strong> : Par exemple, vérifier qu’un utilisateur a le droit d’effectuer une action (accès à une ressource, validation d’un panier, etc.).</li><li><strong>Orchestration</strong> : Un service peut coordonner plusieurs actions : créer une commande, envoyer un email de confirmation, mettre à jour le stock, etc.</li></ul><hr><h2 id="schema-d-architecture-mvc-enrichie" tabindex="-1">Schéma d’architecture MVC enrichie <a class="header-anchor" href="#schema-d-architecture-mvc-enrichie" aria-label="Permalink to &quot;Schéma d’architecture MVC enrichie&quot;">​</a></h2>`,24)),(e(),h(c,null,{default:a(()=>[o(n,{id:"mermaid-113",class:"mermaid",graph:"graph%20TD%3B%0A%20%20Vue%20--%3E%7C%C3%A9v%C3%A9nements%7C%20Contr%C3%B4leur%3B%0A%20%20Contr%C3%B4leur%20--%3E%7Cappelle%7C%20Service%3B%0A%20%20Service%20--%3E%7Cutilise%7C%20Mod%C3%A8le%3B%0A%20%20Service%20--%3E%7Cutilise%7C%20Repository%3B%0A%20%20Repository%20--%3E%7Cacc%C3%A8s%7C%20BaseDeDonn%C3%A9es%5B(Base%20de%20donn%C3%A9es)%5D%0A%20%20Contr%C3%B4leur%20--%3E%7Cmet%20%C3%A0%20jour%7C%20Vue%3B%0A"})]),fallback:a(()=>s[0]||(s[0]=[k(" Loading... ")])),_:1})),s[2]||(s[2]=i("div",{class:"tip custom-block"},[i("p",{class:"custom-block-title"},"TIP"),i("p",null,"À retenir : Un service ne gère ni l'affichage, ni la persistance : il ne fait que de la logique métier.")],-1))])}const A=t(d,[["render",E]]);export{C as __pageData,A as default};
